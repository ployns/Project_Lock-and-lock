////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : checkpass.vf
// /___/   /\     Timestamp : 12/05/2021 16:09:57
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog D:/Lab-digital/Project_LockandLock/FPGA_LockandLock/checkpass.vf -w D:/Lab-digital/Project_LockandLock/FPGA_LockandLock/checkpass.sch
//Design Name: checkpass
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module FJKC_HXILINX_checkpass(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale 1ns / 1ps

module checkpass(checkpass1, 
                 checkpass2, 
                 checkpass3, 
                 checkpass4, 
                 checkpass5, 
                 checkpass6, 
                 checkpass7, 
                 checkpass8, 
                 Enter, 
                 Lock, 
                 pass1, 
                 pass2, 
                 pass3, 
                 pass4, 
                 pass5, 
                 pass6, 
                 pass7, 
                 pass8, 
                 Buzzer, 
                 LED);

    input checkpass1;
    input checkpass2;
    input checkpass3;
    input checkpass4;
    input checkpass5;
    input checkpass6;
    input checkpass7;
    input checkpass8;
    input Enter;
    input Lock;
    input pass1;
    input pass2;
    input pass3;
    input pass4;
    input pass5;
    input pass6;
    input pass7;
    input pass8;
   output Buzzer;
   output LED;
   
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_32;
   wire Buzzer_DUMMY;
   
   assign Buzzer = Buzzer_DUMMY;
   XNOR2  XLXI_4 (.I0(checkpass1), 
                 .I1(pass1), 
                 .O(XLXN_7));
   XNOR2  XLXI_5 (.I0(checkpass2), 
                 .I1(pass2), 
                 .O(XLXN_8));
   XNOR2  XLXI_6 (.I0(checkpass3), 
                 .I1(pass3), 
                 .O(XLXN_9));
   XNOR2  XLXI_7 (.I0(checkpass4), 
                 .I1(pass4), 
                 .O(XLXN_10));
   XNOR2  XLXI_8 (.I0(checkpass5), 
                 .I1(pass5), 
                 .O(XLXN_11));
   XNOR2  XLXI_9 (.I0(checkpass6), 
                 .I1(pass6), 
                 .O(XLXN_12));
   XNOR2  XLXI_10 (.I0(checkpass7), 
                  .I1(pass7), 
                  .O(XLXN_14));
   XNOR2  XLXI_11 (.I0(checkpass8), 
                  .I1(pass8), 
                  .O(XLXN_15));
   AND5  XLXI_12 (.I0(XLXN_11), 
                 .I1(XLXN_10), 
                 .I2(XLXN_9), 
                 .I3(XLXN_8), 
                 .I4(XLXN_7), 
                 .O(XLXN_16));
   AND3  XLXI_13 (.I0(XLXN_15), 
                 .I1(XLXN_14), 
                 .I2(XLXN_12), 
                 .O(XLXN_17));
   AND2  XLXI_14 (.I0(XLXN_17), 
                 .I1(XLXN_16), 
                 .O(Buzzer_DUMMY));
   (* HU_SET = "XLXI_15_0" *) 
   FJKC_HXILINX_checkpass  XLXI_15 (.C(Enter), 
                                   .CLR(Lock), 
                                   .J(Buzzer_DUMMY), 
                                   .K(XLXN_32), 
                                   .Q(LED));
   GND  XLXI_21 (.G(XLXN_32));
endmodule
